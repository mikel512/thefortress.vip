{{- config.AddGeneratedFilesToVSProject = false -}}
﻿{{ for class in data.Classes | Symbols.WhereNameEndsWith("Controller") | Symbols.ThatDoNotHaveAttribute("NTypewriterIgnore")
	if !class.Namespace | String.EndsWith("Controllers")
		continue
	end
	capture output -}}
{{- baseName = class | String.Remove("Controller")
	snakeCase = baseName | Custom.ToSnakeCase()
	hasFormObject = false
	 -}}
{{-for method in class.Methods | Symbols.ThatArePublic}}
	{{-if method.Parameters | String.Contains("Form")-}}
		{{hasFormObject = true}}
	{{-end}}
{{-end}}
// NTypescript generated file

import { environment } from 'src/environments/environment';
import { HttpClient } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
{{class | Custom.GetImports}}  

{{-if hasFormObject == true}}
import { {{baseName}}FormModel, I{{baseName}}FormModel } from '@models/{{snakeCase}}-form-model'
{{-end}}


@Injectable({
  providedIn: 'root'
})
export class {{ baseName}}Service {

	constructor(private http: HttpClient) { } 
{{  for method in class.Methods | Symbols.ThatArePublic 
		parameters = method | Action.Parameters | Parameters.ToTypeScript | Array.Join ", "; 
		bodyParameterName = (method | Action.BodyParameter)?.Name ?? "null" 
		paramArray = method | Action.Parameters

		objVar = parameters | String.Remove(":") | String.Remove(baseName) | String.Remove("FormModel")
		
		returnType = "";
		for attr in method.Attributes
			if attr.Name == "ReturnType"
			returnType = attr.Arguments | Array.First | String.Remove("type :") | String.Strip
			end
		end
		}}    
	{{-if method.Attributes | String.Contains("NTypewriterIgnore")}}
	{{-continue}}
	{{-end}}
	{{-if Array.Size(paramArray) == 0 -}}
	{{}}

	public {{ method.Name | String.ToCamelCase }}(): Observable<{{returnType}}> {
	{{-else}}
	public {{ method.Name | String.ToCamelCase }}({{ parameters }}): Observable<{{returnType}}> {
	{{-end}}
		{{- if Action.HttpMethod(method) == "post" }}
		return this.http.{{method | Action.HttpMethod}}<{{returnType}}>(`${environment.baseUrl}{{method | Action.Url}}`, {{parameters | Custom.GetFunctionArgs}})
		{{- else if Action.HttpMethod(method) == "put" }} 
		return this.http.{{method | Action.HttpMethod}}<{{returnType}}>(`${environment.baseUrl}{{method | Action.Url}}`, {{- parameters | Custom.GetFunctionArgs}})
		{{-else}}
		return this.http.{{method | Action.HttpMethod}}<{{returnType}}>(`${environment.baseUrl}{{method | Action.Url}}`)
		{{-end}}
			.pipe(map(response => {
				{{-if String.EndsWith(returnType, "[]")}}
				return (response as {{returnType}}).map(x => new {{String.Remove(returnType, "[]")}}(x))
				{{-else if returnType == "any"}}
				return response
				{{-else}}
				return new {{returnType}}(<I{{returnType}}> response)
				{{-end}}
			}));
	}
{{- end}}
}
    
{{- end
	filePath = snakeCase | String.Append(".service.ts") | 
	String.Prepend "../../../TheFortress.Client/src/app/services/"
    Save output filePath
   end }}